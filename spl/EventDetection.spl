

// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS. IBM MAKES NO   
// REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, CONCERNING    
// USE OF THE SAMPLE CODE, OR THE COMPLETENESS OR ACCURACY OF THE   
// SAMPLE CODE. IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE    
// OPERATION OF THIS SAMPLE CODE. IBM IS NOT RESPONSIBLE FOR THE    
// RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  
// OF THIS SAMPLE CODE.                                             
//                                                                  
// LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   
// PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   
// DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    
// THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  
// PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   
// ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                
//                                                                  
// (C) Copyright IBM Corp. 2015  All Rights reserved.         
//                                                                  
// end_generated_IBM_copyright_prolog                               


// Use internet toolkit
use com.ibm.streamsx.inet::InetSource;

// Use complex event processing toolkit
use com.ibm.streams.cep::*;

// Use HTTPPost from inet toolkit
use com.ibm.streamsx.inet.http::HTTPPost;

//
// Type definitions 
// 

// Schema for the current weather readings obtained from a weather station.
type WeatherStationSchema = rstring stationCode,
                            int64 observationTime,
                            float32 temp,
                            float32 dewpoint,
                            int16 pressureMillibars,
                            int16 windHeadingDegrees,
                            int16 windSpeedKnots,
                            int16 windGustKnots;

// Schema for weather station readings dropping one attribute and adding some additional, calculated attributes.
type AnnotatedWeatherSchema  = rstring stationCode,
                               int64 observationTime,
                               float32 temp,
                               float32 tempInF,
                               float32 relativeHumidity,
                               float32 dewpoint,
                               int16 windHeadingDegrees,
                               int16 windSpeedKnots,
                               int16 windGustKnots;

// 
// Main flow graph
//

composite EventDetection
//
// The EventDetection SPL application detects both trivial and complex events in a stream of 
// weather data from weather stations around the world.
//
{

graph
 
  //
  // The InetSource operator is used to get weather data from an external source.  In this case, the 
  // data is retrieved over the internet from a set of 24 URIs provided by NOAA, the National Oceanic 
  // and Atmospheric Administration -- an agency of the United States Federal Government.  
  //
  // The operator gets the data, both initially and on a periodic basis after that.
  //
  //             Here is a snippet of the contents of one of the NOAA URIs:
  //
  //                 2009/04/17 02:45
  //                 KCWV 170245Z AUTO 12003KT 10SM CLR 14/13 A3025 RMK AO2
  //
  //                 2009/04/17 02:46
  //                 CYAY 170246Z AUTO 30011KT 6SM -SN OVC026 M09/M12 A2979 RMK SLP091
  //
  //                 2009/04/17 02:45
  //                 PAER 170245Z 36915KT 11SM SKC 06/M09 A2990 RMK EPO
  //
  // The output stream from this operator contains tuples which are rstrings NOAA's METAR format.  
  // One tuple contains the weather readings for a single weather station at a particular point 
  // in time.  Thus, from the first two entries in the above snippet, the resulting two output 
  // tuples will be:
  //
  //                 2009/04/17 02:45 KCWV 170245Z AUTO 12003KT 10SM CLR 14/13 A3025 RMK AO2
  //                 2009/04/17 02:46 CYAY 170246Z AUTO 30011KT 6SM -SN OVC026 M09/M12 A2979 RMK SLP091
  //
  stream <rstring rawObservation> RawObservations = InetSource() {
    param URIList : ["http://tgftp.nws.noaa.gov/data/observations/metar/cycles/00Z.TXT",
                     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/01Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/02Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/03Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/04Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/05Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/06Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/07Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/08Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/09Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/10Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/11Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/12Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/13Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/14Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/15Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/16Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/17Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/18Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/19Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/20Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/21Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/22Z.TXT",
        	     "http://tgftp.nws.noaa.gov/data/observations/metar/cycles/23Z.TXT"]; 
           
          // The incrementalFetch parameter causes the data only new since the previous URI scan
          // to be streamed.  Observations are added to the end of the NOAA files, so this means
          // that on each fetch, the observations added since the previous fetch will be streamed.
          incrementalFetch : true;
	       	
          // The fetchIntervalSeconds parameter controls the amount of time between fetch cycles. 
          fetchInterval : 240.0l;  // Roughly every 4 minutes
        	
          // Each observation consumes three lines in the NOAA file.  The inputLinesPerRecord
          // parameter causes each group of three lines to be combined into a single line when
          // the record is streamed out.  (A default pad value of a single blank is inserted 
          // between the lines as they are combined.)
          inputLinesPerRecord: 3u;
        	
          // As with other types of source operators, the initDelay parameter causes InetSource
          // to wait this number of seconds before beginning its processing, after the application
          // is started.
          initDelay: 10.0l;
            
          // The punctPerFetch parameter causes InetSource to emit a "punctuation" to the output
          // stream after each fetch cycle.  This punctuation can be used as a marker by other
          // operators further downstream.
          punctPerFetch : true;
  }



  //
  // The composite operator PrepareAndFilterWeatherData is defined later in this file. We invoke it
  // here to prep the data stream for event detection.
  //
  stream <AnnotatedWeatherSchema> WeatherSummary = PrepareAndFilterWeatherData(RawObservations) 
  { 
  }

  // 
  // Next, we start the event detection by detecting two trivial events in the stream using 
  // custom operators.
  //

  //
  // We call the first event "Dry Heat".  It will trigger when a weather station reports a relative
  // humidity of less than 10% and a temperature over 105 degrees Fahrenheit.  
  //
  stream <WeatherSummary weatherValues, rstring event> DryHeatEvent = Custom(WeatherSummary)
  {
   logic   
           onTuple WeatherSummary: {
             if (tempInF > 105.0w && relativeHumidity < 0.10w) {
               submit ({ weatherValues=WeatherSummary, event="Dry Heat"}, DryHeatEvent ) ;
             } 
           }
  }

  //
  // We call the second trivial event "Sauna".  It will trigger when a weather station reports a relative
  // humidity over 75% and a temperature over 90 degrees Fahrenheit.  
  //
  stream <WeatherSummary weatherValues, rstring event> SaunaEvent = Custom(WeatherSummary)
  {
    logic   
      onTuple WeatherSummary: {
        if (tempInF > 90.0w && relativeHumidity > 0.75w) {
          submit ({ weatherValues=WeatherSummary, event="Sauna"}, SaunaEvent ) ;
        } 
      }
  }

  //
  // Next we detect two complex events using the MatchRegex operator.  The operator recognizes patterns by
  // aggregating state across a data stream.  These events are called composite events because they 
  // require consideration of more than just a single tuple to evaluate.
  // 

  // 
  // The first complex event is called "M-shape".  It triggers when the graph of the temperature for a
  // weather station form's an M shape over a period of time.
  //
  // Detecting M shape patterns in weather data is not that useful, but recognizing an M shape in financial
  // trading is valuable and is referred to as a "double-top" stock pattern. 
  //
  // See http://hirzels.com/martin/papers/debs12-cep.pdf for more information on this complex event
  // detection method, the double-top pattern and other patterns.
  //
  stream<WeatherSummary weatherValues, rstring event> TempMEvent = MatchRegex(WeatherSummary) 
  {
    param
      pattern     : ". rise+ drop+ rise+ drop* deep";
      partitionBy : stationCode;    
      predicates  : {
	rise = tempInF>First(tempInF)  && tempInF>=Last(tempInF),
	drop = tempInF>=First(tempInF) && tempInF<Last(tempInF),
	deep = tempInF<First(tempInF)	&& tempInF<Last(tempInF) };
    output
      TempMEvent : weatherValues=WeatherSummary, event="M-Shape Temp";
  }

  // 
  // The second complex event we call "Steady".  It triggers when the temperature reported by a weather 
  // station changes by 1 degree or less per hour for 11 straight hours.  In addition, the net change 
  // during the 11 hours cannot exceed 3 degrees.
  //
  stream<WeatherSummary weatherValues, rstring event> TempSteadyEvent = MatchRegex(WeatherSummary) 
  {
    param
      pattern     : ". steady steady steady steady steady steady steady steady steady steady";
      partitionBy : stationCode;     
      predicates  : {
        steady = abs(tempInF-Last(tempInF)) <= 1.0w && abs(tempInF-First(tempInF)) <=3.0w };
    output
      TempSteadyEvent : weatherValues=WeatherSummary, event="Steady Temp";
  }


  // 
  // This functor operator accepts all the event types and creates a summary tuple for each event.
  // 
  stream<rstring eventType, rstring eventStation, rstring eventTime> OutputEvents = Functor(DryHeatEvent, 
                                                                                            SaunaEvent, 
                                                                                            TempMEvent, 
                                                                                            TempSteadyEvent as I) {
    logic
      state: {
        mutable rstring timeString = "";
      } 
 
      onTuple I: {
        // Get time string and shorten to take off the seconds and year
        timestamp ts = createTimestamp(weatherValues.observationTime, 0u);
        timeString = substring(ctime(ts), 0, 16);
      }
      output
        OutputEvents : eventType = I.event,
                       eventStation = I.weatherValues.stationCode,
                       eventTime = timeString;
  }

  // 
  // Send events to the the application user interface by converting them to json and HTTPPost-ing
  // to the Node.js app
  // 
  stream <rstring jsonString> JSONOutput = com.ibm.streamsx.json::TupleToJSON(OutputEvents) 
  {
  }
  
  () as HttpEvents = HTTPPost(JSONOutput) {
    param 
      headerContentType : "application/json";
      url : ((rstring) getSubmissionTimeValue("route")); 
  }

  //
  // Print events to stdout so they can be viewed in a log for debug purposes.
  //
  () as HttpEventsDbg = Custom(JSONOutput) {
    logic
      onTuple JSONOutput: {
        println(JSONOutput.jsonString);
      }
      onPunct JSONOutput: {
        println(currentPunct());
      }
  }

  //
  // Aggregate operator to determine the current max and min temperatures
  //
  stream <float32 maxTemp, rstring maxTempStation, int64 maxObservationTime,
          float32 minTemp, rstring minTempStation, int64 minObservationTime> MaxMinTemp = Aggregate(WeatherSummary) {
    window
      // Sliding window, evicting tuples that have an observationTime outside the last hour, producing an
      // aggregate result tuple every 60 seconds.
      WeatherSummary: sliding, delta(observationTime, 3600l), time(60);
    output
      MaxMinTemp: maxTemp = Max(tempInF), 
      maxTempStation = ArgMax(tempInF, stationCode), 
      maxObservationTime = ArgMax(tempInF, observationTime),
      minTemp = Min(tempInF), 
      minTempStation = ArgMin(tempInF, stationCode), 
      minObservationTime = ArgMin(tempInF, observationTime);
  }

  //
  // Check whether the temperature max/min has changed.  If so, format it as another kind of event that will
  // be sent to the Node.js app.
  //
  stream<rstring eventType, float32 maxTemp, rstring maxTempStation,
                            float32 minTemp, rstring minTempStation> NewMaxMin 
                             = Custom(MaxMinTemp) {
    logic
      state: {
        mutable float32 currentMax = 0;
        mutable float32 currentMin = 100;
      }
    onTuple MaxMinTemp: {
      if (maxTemp > currentMax || minTemp < currentMin) {
        currentMax = maxTemp;
        currentMin - minTemp;
        submit ({ eventType="MaxMin Temp", maxTemp=maxTemp, maxTempStation=maxTempStation,
                                           minTemp=minTemp, minTempStation=minTempStation}, NewMaxMin) ;
      }
    }

  }

  // 
  // Send the max/min info to the the application user interface by converting them to json and 
  // HTTPPost-ing to the Node.js app
  // 
  stream <rstring jsonString> JSONTempOutput = com.ibm.streamsx.json::TupleToJSON(NewMaxMin) 
  {
  }

  () as HttpTempEvents = HTTPPost(JSONTempOutput) {
    param 
      headerContentType : "application/json";
      url : ((rstring) getSubmissionTimeValue("route")); 
  }

  //
  // Print max/min info to stdout so they can be viewed in a log for debug purposes.
  //
  () as HttpTempEventsDbg = Custom(JSONTempOutput) {
    logic
      onTuple JSONTempOutput: {
        println(JSONTempOutput.jsonString);
      }
      onPunct JSONTempOutput: {
        println(currentPunct());
      }
  }

} // End of main flow graph


  //
  // Composite Operator (used above), encapsulating the steps for data preparation and filtering on the weather data.
  //
  composite PrepareAndFilterWeatherData (input RawObservations; output FilteredAndPrepared) {

  graph

    /************************************************************************************
    # Purpose:        Convert the data from the raw, METAR format into a more structured
    #                 stream.  
    #  
    # Input Streams:  The stream of raw observations with tuples containing strings in 
    #                 METAR format.
    #
    # Output Streams: Tuples according to the schema below, containing attributes for
    #                 the weather information.  One tuple contains a single weather 
    #                 station at a particular point in time.
    ************************************************************************************/
    stream <WeatherStationSchema> WeatherStationReadings = Functor(RawObservations) 
    {
      logic  state : { mutable rstring locCode = "";
                       mutable int64 obsTime = 0;
                       mutable float32 temp = -999.0, dewp = -999.0;
                       mutable int16 press = -999h, wSpeed = -999h, wHeading = -999h,wGust = -999h; }
             onTuple RawObservations: {
               mutable rstring obsData = "";
  	       locCode = "";
	       obsTime = 0l;
	       temp = -999.0w; 
	       dewp = -999.0w;
	       press = -999h;
	       wSpeed = -999h;
	       wHeading = -999h;
	       wGust = -999h;

               // Example incoming record:
               // 2009/04/17 02:45 KCWV 170245Z AUTO 12003KT 10SM CLR 14/13 A3025 RMK AO2

               // Separate the observation time and location code from the rest of the information
               // obsData is everything after the station location code, e.g. "170245Z AUTO 12003KT 10SM CLR 14/13 A3025 RMK AO2"
               // locCode is the location code, e.g. "KCWV"
               list<rstring> stationInfo = regexMatch(rawObservation, "([0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}) ([[:alnum:]]{4}) ([0-9]{6}.)(.*)");

  	       if (size(stationInfo) > 4) {
                 obsData = stationInfo[4] + " ";
                 locCode = stationInfo[2];
                 rstring ymdhms = stationInfo[1] + ":00";
                 timestamp ts = toTimestamp(Sys.YYYY_MM_DD_hh_mm_ss, ymdhms, "GMT");
                 obsTime = getSeconds(ts);
  	       }

               // Decode the temperature and dew point readings, if they are present (14/13 in the above example)		
	       list<rstring> temp_dewpoint = regexMatch(obsData, " (M?)([0-9]{2})/((M?)([0-9]{2}))? ");
	       if (size(temp_dewpoint) > 0) {
                 temp = (float32) (temp_dewpoint[2]);
                 if (temp_dewpoint[1] == "M")
                   temp = -temp;
                 if (size(temp_dewpoint) > 4) {
                   dewp = (float32) (temp_dewpoint[5]);
                   if (temp_dewpoint[4] == "M")
                     dewp = -dewp;
                 }
	       }
	
               // Decode the wind speed data if present (12003KT in the above example)			
	       list<rstring> wind = regexMatch(obsData, " ([0-9]{3}|VRB)([0-9]{2,3})(G([0-9]{2,3}))?(KT|MPS) ");
 	       if (size(wind) > 0) {
                 if (wind[1] != "VRB")
                   wHeading = (int16) (wind[1]);
                 else
                   wHeading = -1h;
                 wSpeed = (int16) (wind[2]);
                 wGust = wSpeed;
                 //  index of units (KT/MPS) is last in list, could be at index 4 or 5 depending on whether
  	         //  an optional gust value appeared in the measurement
	         int32 unitIndex = size(wind) - 1;
		
                 if (size(wind) > 5) // observation included an optional gust value
                   wGust = (int16) (wind[4]);
			
                 if (wind[unitIndex] == "MPS") {
                   wSpeed = (int16) ((float64) wSpeed * 1.9438445);
                   wGust = (int16) ((float64) wGust * 1.9438445);
                 }
	       }
	
               // Decode the barometric pressure if present (A3025 in the above example)		
  	       list <rstring> baroA = regexMatch(obsData, " (A)([0-9]{4}) ");
	       if (size(baroA) > 0)
                 press = (int16) ((float64) (baroA[2]) * 0.3386);
               else {
                 list <rstring> baroQ = regexMatch(obsData, " (Q)([0-9]{3,4}) ");
                 if (size(baroQ) > 0)
                   press = (int16) (baroQ[2]);
               }
             }
      output WeatherStationReadings :  stationCode = locCode,
                                       observationTime = obsTime,
                                       temp = temp,
                                       dewpoint = dewp,
                                       pressureMillibars = press,
                                       windHeadingDegrees = wHeading,
                                       windSpeedKnots = wSpeed,
                                       windGustKnots = wGust;
    } 


    // 
    // Throw out tuples that have missing values for attributes that we use in our analysis.
    // Earlier steps in the processing have replaced missing fields with the sentinel value
    // of -999.  Tuples containing missing values must be thrown out, so that they don't 
    // adversely affect the downstream analysis.  Even though we throw out a tuple that is 
    // missing a value, a complete tuple with the same timestamp may flow through later.
    //
    stream <WeatherStationSchema> FilteredMissingValues = Filter(WeatherStationReadings)
    {
      // Its important that this filtering occurs prior to the filtering of duplicate 
      // tuples.  This will prevent throwing out a higher-quality duplicate in that step
      param filter : temp > -999.0w && dewpoint > -999.0w;
    }

    stream <WeatherStationSchema> FilteredOlderValues = Filter(FilteredMissingValues)
    {
      // Only allow tuples with observation times in the last 12 hours to be analyzed.
      param filter : observationTime > getSeconds(getTimestamp()) - 43200l;
    }

    //
    // Remove any duplicate tuples from the stream.  A duplicate in this case is defined to 
    // be a tuple with the same station code and timestamp as a previously processed tuple.
    // Sometimes weather stations will send out duplicate readings.
    //
    stream<WeatherStationSchema> NoDuplicates = DeDuplicate(FilteredOlderValues)
    {                                                                            
      param                                                                         
        timeOut : 86400.0;                   // No dups within a 24 hour period.                           
        key : stationCode, observationTime;  
    }

    //
    // Occasionally, a weather station reading comes in that had a bad observation time on
    // it.  This Filter operator filters out any tuples with observation times in the future.
    // A bogus future timestamp could result in the eviction of valid tuples from the Aggregate
    // operator later in the flow.
    //
    stream <WeatherStationSchema> TimeFilter = Filter(NoDuplicates) 
    {
      param filter : observationTime <= getSeconds(getTimestamp());
    }


    //
    // Annotate the tuple with derived values of temperature in Fahrenheit and relative humidity.
    //
    stream <AnnotatedWeatherSchema> FilteredAndPrepared = Functor(TimeFilter) {

      output FilteredAndPrepared : 
             // Convert temp to degrees Fahrenheit and output in a separate attribute 
             tempInF = (9.0w/5.0w)*temp+32.0w, 
             // Calculate estimated relative humidity using the temperature and dew point
             relativeHumidity = exp((17.269w*dewpoint)/(273.3w+dewpoint))/exp((17.269w*temp)/(273.3w+temp));
    }
}



